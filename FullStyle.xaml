<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:DisasmUiTest">

    <!-- some brushes, extracted from the default style -->
    <LinearGradientBrush x:Key="ListItemHoverFill" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF1FBFF" Offset="0"/>
        <GradientStop Color="#FFD5F1FE" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ListItemSelectedFill" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFD9F4FF" Offset="0"/>
        <GradientStop Color="#FF9BDDFB" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ListItemSelectedInactiveFill" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFEEEDED" Offset="0"/>
        <GradientStop Color="#FFDDDDDD" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ListItemSelectedHoverFill" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFEAF9FF" Offset="0"/>
        <GradientStop Color="#FFC9EDFD" Offset="1"/>
    </LinearGradientBrush>

    <!-- Column set for the long-comment lines.  The first five columns will be empty, but
    have their widths set to match those in the containing ListView. -->
    <GridViewColumnCollection x:Key="gvcc">
        <GridViewColumn Width="{Binding
                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}
                }, Path=View.Columns[0].ActualWidth}"/>
        <GridViewColumn Width="{Binding
                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}
                }, Path=View.Columns[1].ActualWidth}"/>
        <GridViewColumn Width="{Binding
                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}
                }, Path=View.Columns[2].ActualWidth}"/>
        <GridViewColumn Width="{Binding
                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}
                }, Path=View.Columns[3].ActualWidth}"/>
        <GridViewColumn Width="{Binding
                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}
                }, Path=View.Columns[4].ActualWidth}"/>
        <GridViewColumn Header="two" DisplayMemberBinding="{Binding XPath=@Comment}"/>
    </GridViewColumnCollection>

    <!-- Template for long lines.  This is a modification of the default style, with
    Content and Columns attributes defined in the GridViewRowPresenter.  It appears we
    inherit the FocusVisualStyle from the default. -->
    <ControlTemplate x:Key="longComment" TargetType="{x:Type ListViewItem}">
        <StackPanel>
            <Border BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    CornerRadius="2"
                    SnapsToDevicePixels="true">
                <Border x:Name="InnerBorder" BorderThickness="1" CornerRadius="1">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="11"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="UpperHighlight" Fill="#75FFFFFF" Visibility="Collapsed"/>
                        <GridViewRowPresenter Content="{TemplateBinding Content}"
                                              Columns="{StaticResource gvcc}"
                                              Grid.RowSpan="2"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </Border>
            </Border>
        </StackPanel>

        <!-- triggers for hover, selection, and activation effects -->
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource ListItemHoverFill}"/>
                <Setter Property="BorderBrush" Value="#FFCCF0FF"/>
                <Setter Property="Visibility" TargetName="UpperHighlight" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Background" Value="{StaticResource ListItemSelectedFill}"/>
                <Setter Property="BorderBrush" Value="#FF98DDFB"/>
                <Setter Property="BorderBrush" TargetName="InnerBorder" Value="#80FFFFFF"/>
                <Setter Property="Visibility" TargetName="UpperHighlight" Value="Visible"/>
                <Setter Property="Fill" TargetName="UpperHighlight" Value="#40FFFFFF"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource ListItemSelectedInactiveFill}"/>
                <Setter Property="BorderBrush" Value="#FFCFCFCF"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="IsMouseOver" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource ListItemSelectedHoverFill}"/>
                <Setter Property="BorderBrush" Value="#FF98DDFB"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="codeListItemStyle" TargetType="{x:Type ListViewItem}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding XPath=@IsLongComment}" Value="True">
                <Setter Property="Template" Value="{StaticResource longComment}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>